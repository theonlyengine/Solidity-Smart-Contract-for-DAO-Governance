// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract MaartionDAO is Ownable {

    using SafeMath for uint256;

    IERC20 public maartionToken;

    struct Proposal {
        uint256 id;
        string description;
        uint256 voteCount;
        bool executed;
        uint256 deadline;
        mapping(address => bool) votes;
    }

    uint256 public nextProposalId;
    uint256 public votingDuration;
    mapping(uint256 => Proposal) public proposals;

    event ProposalCreated(uint256 proposalId, string description, uint256 deadline);
    event VoteCast(address voter, uint256 proposalId);
    event ProposalExecuted(uint256 proposalId);

    constructor(address _maartionToken, uint256 _votingDuration) {
        maartionToken = IERC20(_maartionToken);
        votingDuration = _votingDuration;
    }

    modifier onlyTokenHolders() {
        require(maartionToken.balanceOf(msg.sender) > 0, "Only token holders can participate");
        _;
    }

    function createProposal(string memory _description) public onlyTokenHolders {
        uint256 proposalId = nextProposalId;
        Proposal storage proposal = proposals[proposalId];
        proposal.id = proposalId;
        proposal.description = _description;
        proposal.voteCount = 0;
        proposal.executed = false;
        proposal.deadline = block.timestamp.add(votingDuration);

        emit ProposalCreated(proposalId, _description, proposal.deadline);

        nextProposalId++;
    }

    function voteOnProposal(uint256 _proposalId) public onlyTokenHolders {
        Proposal storage proposal = proposals[_proposalId];
        require(block.timestamp < proposal.deadline, "Voting period has ended");
        require(!proposal.votes[msg.sender], "You have already voted");

        proposal.votes[msg.sender] = true;
        proposal.voteCount = proposal.voteCount.add(1);

        emit VoteCast(msg.sender, _proposalId);
    }

    function executeProposal(uint256 _proposalId) public onlyOwner {
        Proposal storage proposal = proposals[_proposalId];
        require(block.timestamp >= proposal.deadline, "Voting period not yet ended");
        require(!proposal.executed, "Proposal already executed");

        proposal.executed = true;

        // Implement the proposal execution logic here

        emit ProposalExecuted(_proposalId);
    }

    function getProposalDetails(uint256 _proposalId) public view returns (string memory description, uint256 voteCount, bool executed, uint256 deadline) {
        Proposal storage proposal = proposals[_proposalId];
        return (proposal.description, proposal.voteCount, proposal.executed, proposal.deadline);
    }
}
